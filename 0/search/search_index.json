{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Home      Full-featured  companion plugin.  <p>     Ethereal is a full-featured Eternal Towers of Hell companion plugin. The     mission is to consolidate utilities for tower building and provide a     centralized, state-of-the-arts foundation for future work. </p>      Download for Roblox       Documentation  free, open source Featured tower: Tower of Complexity and Volatility"},{"location":"download/","title":"Download","text":"<p>no unc</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/12/31/hello-ethereal/","title":"Hello Ethereal!","text":"<p>Hello Ethereal, the full-featured Eternal Towers of Hell companion plugin.</p> <p>wip lol</p>"},{"location":"docs/","title":"What is Ethereal?","text":"<p>ETHEREAL IS IN ACTIVE DEVELOPMENT. IT'S UNRELEASED, UNFINISHED, AND UNTESTED. DO NOT BUILD YOUR TOWERS WITH IT YET. THE DOCUMENTATION IS INCOMPLETE AND WILL CHANGE.</p> <p>Ethereal is a full-featured Eternal Towers of Hell companion plugin.</p> <ul> <li>Existing user? Read the changelog for recent features and bug fixes.</li> <li>Interested in authoring your own tools? Read the Plugin API guides and reference.</li> <li>Interested in using Ethereal at runtime? Read the Runtime API guides and reference.</li> </ul>"},{"location":"docs/#motivation","title":"Motivation","text":""},{"location":"docs/#etoh-deserves-better","title":"EToH deserves better","text":"<p>The Eternal Towers of Hell community has exploded in size, but its tooling hasn't kept pace. Other obby games like Tria.OS prove the benefits of strong developer experience, with it's helpful companion plugin and guides. It's time to lay the foundation for the next decade of tower building.</p> <p>Ethereal is a full-featured Eternal Towers of Hell companion plugin that consolidates scripts, plugin functionality, tower kits, images, sound effects, and ClientObjects into an intuitive package. External plugin APIs pave way for future extensions.</p>"},{"location":"docs/#etoh-is-too-complicated","title":"EToH is too complicated","text":"<p>ie.</p> <ul> <li>JToH Kit Tools to bootstrap a project</li> <li>JToH Part Counter to ensure your tower doesn't surpass the limits.</li> <li>Archimedes for creating curved geometry</li> <li>Gapfill from GeomTools for filling misaligned parts</li> <li>OozleDraw and AAZIER to create tightropes</li> <li>Welder to weld parts faster</li> <li>Quality-of-life plugins such as the Elttob Suite</li> </ul> <p>Ethereal consolidates these resources into one widget. The amount of mental boilerplate Ethereal removes is staggering:</p> <p> </p>"},{"location":"docs/packages/","title":"Packages","text":"<p>Every Ethereal version bundles zero-dependency APIs for plugins and live games. These are packaged as <code>.rbxm</code> models in GitHub releases and published on common package manager.</p>"},{"location":"docs/packages/#using-package-managers","title":"Using Package Managers","text":"<p>For advanced users, Ethereal is published on common Roblox package managers. This is especially useful if you sync code using a tool like Rojo.</p> <p>The following packages are available:</p> Registry Ethereal for Plugins Ethereal for Games  pesde <code>@znotfireman/ethereal_for_plugins</code> <code>@znotfireman/ethereal_for_games</code>  Wally <code>@znotfireman/ethereal-for-plugins</code> <code>@znotfireman/ethereal-for-games</code> n NPM <code>@rbxts/ethereal-for-plugins</code> <code>@rbxts/ethereal-for-games</code>"},{"location":"docs/packages/#technical-details","title":"Technical Details","text":"<p>These packages wrap an internal <code>BindableFunction</code> created by Ethereal inside <code>StudioService</code>.</p>"},{"location":"docs/ethereal-for-plugins/","title":"Ethereal for Plugins","text":"<p>The Ethereal for Plugins package enables extending Ethereal with your own tools.</p>"},{"location":"docs/ethereal-for-plugins/#plugin-setup","title":"Plugin Setup","text":"<p>Ensure you have the Ethereal for Plugins package.</p> <p>Create a new module, perhaps named <code>ethereal</code>, and import the Ethereal for Plugins package:</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal Ethereal = require(plugin.packages.ethereal)\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#permissions","title":"Permissions","text":"<p>In order to use any of the Ethereal for Plugins APIs, you must first explicitly request them using <code>Ethereal.permission</code>.</p> <p>Users will be prompted to allow/deny the plugin for access. This function will yield until the user responds and will throw if access is denied.</p> <pre><code>local et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n</code></pre> <p>Alternatively, <code>Ethereal.tryPermission</code> returns a result object which can be handled:</p> <pre><code>local etResult = Ethereal.tryPermission(plugin, {\n    -- ...\n})\n\nif not etResult.ok then\n    return error(`Failed to get Ethereal for Plugins: {etResult.reason} (id: {etResult.id})`)\nend\n\nlocal et = etResult.api\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#keys","title":"Keys","text":"<p>The API includes a key that uniquely identifies you as an authenticated plugin. You can store this key as a plugin setting to request permission without prompting the user for subsequent sessions:</p> <pre><code>local key = plugin:GetSetting(\"etherealPermissionKey\")\n\nlocal et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n    key = key,\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n\nif not key then\n    plugin:SetSetting(\"etherealPermissionKey\", et.key)\nend\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#organization","title":"Organization","text":"<p>Ethereal for Plugins can now be used, but it's strongly recommended to create a dedicated module for the permissioned API:</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal Ethereal = require(plugin.packages.ethereal)\n\nlocal key = plugin:GetSetting(\"etherealPermissionKey\")\n\nlocal et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n\nif not key then\n    plugin:SetSetting(\"etherealPermissionKey\", et.key)\nend\n\nreturn et\n</code></pre> <p>You can then require this module and use the returned APIs.</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal et = require(plugin.ethereal)\n\nprint(et.version) --&gt; \"0.1.0\"\n</code></pre>"},{"location":"docs/reference/ethereal-for-games/","title":"Ethereal for Games","text":""},{"location":"docs/reference/ethereal-for-games/#ethereal-for-games","title":"Ethereal for Games","text":"<p>APIs for interacting with the Ethereal plugin in a running game.</p> <p>Summary:</p> <p>Packages:</p> <ul> <li>  pesde \u2014 <code>@znotfireman/ethereal_for_games</code></li> <li>  wally \u2014 <code>@znotfireman/ethereal-for-games</code></li> <li>n NPM \u2014 <code>@znotfireman/ethereal-for-games</code></li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/","title":"Ethereal for Plugins","text":""},{"location":"docs/reference/ethereal-for-plugins/#ethereal-for-plugins","title":"Ethereal for Plugins","text":"<p>APIs for creating new tools and interacting with the Ethereal plugin.</p> <p>Summary:</p> <ul> <li>Ethereal: Entry point to the Ethereal for Plugins package.</li> <li>Lib: Tool library. Every Tool <code>init</code> function receives the <code>Lib</code>, which enables interacting with the current selected tower and the Ethereal plugin. Certain APIs require permissions requested from <code>Ethereal.permission</code> or <code>Ethereal.tryPermission</code>.</li> </ul> <p>Packages:</p> <ul> <li>  pesde \u2014 <code>@znotfireman/ethereal_for_plugins</code></li> <li>  wally \u2014 <code>@znotfireman/ethereal-for-plugins</code></li> <li>n NPM \u2014 <code>@znotfireman/ethereal-for-plugins</code></li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#ethereal","title":"Ethereal","text":"<p><pre><code>type Ethereal = {\n    permission: (plugin: Plugin) -&gt; (),\n}\n</code></pre> Entry point to the Ethereal for Plugins package.</p>"},{"location":"docs/reference/ethereal-for-plugins/#function-permission","title":"function permission","text":"<p><pre><code>function Ethereal.permission(\n    plugin: Plugin\n): ()\n</code></pre> Permission</p> <p>Parameters:</p> <ul> <li>plugin \u2014 The plugin that is requesting Ethereal's APIs.</li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#lib","title":"Lib","text":"<p><pre><code>type Lib = {\n    tower: (self: Lib) -&gt; Tower?,\n    action: (self: Lib, props: ActionProps) -&gt; Action,\n}\n</code></pre> Tool library. Every Tool <code>init</code> function receives the <code>Lib</code>, which enables interacting with the current selected tower and the Ethereal plugin. Certain APIs require permissions requested from <code>Ethereal.permission</code> or <code>Ethereal.tryPermission</code>.</p>"},{"location":"docs/reference/ethereal-for-plugins/#function-tower","title":"function tower","text":"<p><pre><code>function Lib.tower(\n    self: Lib\n): Tower?\n</code></pre> Returns the selected tower if any.</p> <p>Returns:</p> <ul> <li><code>Tower?</code> \u2014 The selected Tower object.</li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#function-action","title":"function action","text":"<p><pre><code>function Lib.action(\n    self: Lib,\n    props: ActionProps\n): Action\n</code></pre> Creates a new action. Actions are functions activated as buttons in the tool listings.</p> <p>Parameters:</p> <ul> <li>props \u2014 Construction properties.</li> </ul> <p>Returns:</p> <ul> <li><code>Action</code> \u2014 </li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#type-actionprops","title":"type ActionProps","text":"<p><pre><code>export type ActionProps = {\n    label: string,\n}\n</code></pre> Properties for creating actions.</p> <ul> <li>label \u2014 The label used for the action button.</li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#type-towerobbyinstance","title":"type TowerObbyInstance","text":"<p><pre><code>export type TowerObbyInstance = {\n    WinPad: BasePart,\n}\n</code></pre> The Obby folder in an Eternal Towers of Hell tower.</p> <ul> <li>WinPad \u2014 When touched finishes a player's run of the tower.</li> </ul>"},{"location":"docs/reference/ethereal-for-plugins/#type-towerinstance","title":"type TowerInstance","text":"<p><pre><code>export type TowerInstance = {\n    ClientSidedObjects: Instance,\n    Obby: TowerObbyInstance,\n    Frame: Instance,\n    SpawnLocation: BasePart,\n}\n</code></pre> An Eternal Towers of Hell tower instance.</p> <ul> <li>ClientSidedObjects \u2014 Contains every ClientObject used in the tower.</li> <li>Obby \u2014 Contains the purism and the tower's winpad</li> <li>Frame \u2014 The frame of the tower.</li> <li>SpawnLocation \u2014 Where the player will spawn.</li> </ul>"},{"location":"blog/archive/2023/","title":"2023","text":""}]}