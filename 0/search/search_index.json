{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Home      Full-featured  companion plugin.  <p>     Ethereal is a full-featured Eternal Towers of Hell companion plugin. The     mission is to consolidate utilities for tower building and provide a     centralized, state-of-the-arts foundation for future work. </p>      Download for Roblox       Documentation  free, open source Featured tower: Tower of Complexity and Volatility"},{"location":"docs/","title":"What is Ethereal?","text":"<p>ETHEREAL IS IN ACTIVE DEVELOPMENT. IT'S UNRELEASED, UNFINISHED, AND UNTESTED. DO NOT BUILD YOUR TOWERS WITH IT YET.</p> <p>Ethereal is a full-featured Eternal Towers of Hell companion plugin.</p> <ul> <li>Existing user? Read the changelog for recent features and bug fixes.</li> <li>Interested in authoring your own tools? Read the Plugin API guides and reference.</li> <li>Interested in using Ethereal at runtime? Read the Runtime API guides and reference.</li> </ul>"},{"location":"docs/#motivation","title":"Motivation","text":""},{"location":"docs/#etoh-deserves-better","title":"EToH deserves better","text":"<p>The Eternal Towers of Hell community has exploded in size, but its tooling hasn't kept pace. Other obby games like Tria.OS prove the benefits of strong developer experience, with it's helpful companion plugin and guides. It's time to lay the foundation for the next decade of tower building.</p> <p>Ethereal is a full-featured Eternal Towers of Hell companion plugin that consolidates scripts, plugin functionality, tower kits, images, sound effects, and ClientObjects into an intuitive package. External plugin APIs pave way for future extensions.</p>"},{"location":"docs/#etoh-is-too-complicated","title":"EToH is too complicated","text":"<p>ie.</p> <ul> <li>JToH Kit Tools to bootstrap a project</li> <li>JToH Part Counter to ensure your tower doesn't surpass the limits.</li> <li>Archimedes for creating curved geometry</li> <li>Gapfill from GeomTools for filling misaligned parts</li> <li>OozleDraw and AAZIER to create tightropes</li> <li>Welder to weld parts faster</li> <li>Quality-of-life plugins such as the Elttob Suite</li> </ul> <p>Ethereal consolidates these resources into one widget. The amount of mental boilerplate Ethereal removes is staggering:</p> <p> </p>"},{"location":"docs/packages/","title":"Packages","text":"<p>Ethereal offers dependency-free, version-matched APIs for plugins and live games. <code>.rbxm</code> models are available in the latest GitHub release.</p> <p>Package versions are paired with it's Ethereal plugin version.</p>"},{"location":"docs/packages/#using-package-managers","title":"Using Package Managers","text":"<p>For advanced users, Ethereal is published on common Roblox package managers. It's best with the Plugin API, as you can develop your plugin outside of Roblox Studio and sync it with Rojo.</p> <p>The following packages are available:</p> Registry Plugin Runtime Wally <code>@znotfireman/ethereal-plugin-api</code> <code>@znotfireman/ethereal-runtime-api</code> Pesde <code>@znotfireman/ethereal-plugin-api</code> <code>@znotfireman/ethereal-runtime-api</code> NPM <code>@znotfireman/ethereal-plugin-api</code> <code>@znotfireman/ethereal-runtime-api</code>"},{"location":"docs/packages/#technical-details","title":"Technical Details","text":"<p>These packages wrap an internal <code>BindableFunction</code> created by Ethereal inside <code>StudioService</code>.</p>"},{"location":"docs/plugin-api/","title":"Plugin API","text":""},{"location":"docs/plugin-api/#setup","title":"Setup","text":"<pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"), \"Run this as a plugin!\")\nlocal Ethereal = require(plugin.Packages.Ethereal)\n</code></pre> <pre><code>local et = Ethereal.permission(plugin, {\n    id = \"myFirstEtherealPlugin\",\n    name = \"My First Ethereal Plugin\",\n    icon = \"rbxassetid://1234567890\",\n\n    permissions = {}\n})\n</code></pre> <pre><code>    permissions = {\n        Ethereal.Permissions.CreateTool\n    }\n</code></pre> <pre><code>et.createTool {\n    id = _,\n    name = _,\n    overview = _,\n    description = _,\n    tags = _,\n\n    args = _,\n\n    run = _,\n}\n</code></pre> <pre><code>    id = \"myFirstTool\",\n    name = \"My First Tool\",\n    overview = \"My First Tool\",\n    description = \"My First Tool\",\n    tags = {},\n</code></pre> <pre><code>    args = {\n        {\n            kind = \"boolean\",\n            name = \"boolArg\",\n            label = \"Boolean Argument\",\n            default = true\n        }\n    },\n</code></pre> <pre><code>    run = function(ctx)\n        print(\"Hello Ethereal!\")\n    end\n</code></pre> <pre><code>    run = function(ctx)\n        ctx.onAction(\"Click me\", function()\n            print(\"Clicked!\")\n        end)\n    end\n</code></pre> <pre><code>    run = function(ctx)\n        ctx.onAction(\"Click me\", function()\n            print(\"Clicked!\")\n\n            local boolArg = ctx:arg(\"boolArg\"):assertBoolean():unwrap()\n        end)\n    end\n</code></pre>"}]}