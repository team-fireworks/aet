{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Home      Full-featured  companion plugin.  <p>     Ethereal is a full-featured Eternal Towers of Hell companion plugin     jampacked with utilities and a state-of-the-arts foundation for the     next decade of tower building. </p>      Install for Roblox       Documentation  free, open source Featured tower: Tower of Complexity and Volatility by Miantoz1980, ImNotFireMan123 and ConfirmedIlluminatix"},{"location":"installation/","title":"Installation","text":"<p>Download on Creator Store</p>"},{"location":"installation/#manual-install","title":"Manual Install","text":"<ol> <li> <p>Download plugin model</p> </li> <li> <p>Open <code>C:\\Users\\LocalUser\\AppData\\Local\\Roblox\\Plugins</code></p> </li> <li> <p>Drag the installed <code>Ethereal.rbxm</code> model into the folder</p> </li> <li> <p>Open Roblox Studio and enjoy!</p> </li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/04/01/hello-ethereal/","title":"Hello Ethereal!","text":"<p>Hello Ethereal, the full-featured Eternal Towers of Hell companion plugin.</p> <p>wip lol</p>"},{"location":"docs/contributing-to-ethereal/","title":"Contributing to Ethereal","text":"<p>This page is a work in progress.</p>"},{"location":"docs/packages/","title":"Packages","text":"<p>Every version of Ethereal includes zero-dependency packages for plugins and games.</p> <p>These are packaged as <code>.rbxm</code> models on GitHub  Releases and published for common Roblox package managers.</p>"},{"location":"docs/packages/#using-package-managers","title":"Using Package Managers","text":"<p>Ethereal is published on common Roblox package managers. This is especially useful if you sync code using a tool like Rojo or you want to consume other packages.</p> <p>The following packages are available:</p> Registry Ethereal for Plugins Ethereal for Games  pesde <code>@znotfireman/ethereal_for_plugins</code> <code>@znotfireman/ethereal_for_games</code>  Wally <code>@znotfireman/ethereal-for-plugins</code> <code>@znotfireman/ethereal-for-games</code> n NPM <code>@rbxts/ethereal-for-plugins</code> <code>@rbxts/ethereal-for-games</code>"},{"location":"docs/packages/#technical-details","title":"Technical Details","text":"<p>These packages wrap an internal <code>BindableFunction</code> created by Ethereal inside <code>StudioService</code>.</p>"},{"location":"docs/tour-of-ethereal/","title":"Tour of Ethereal","text":"<p>To start, let's create a tower using the Ethereal plugin. You'll see how everything looks together, but you aren't expected to understand everything right away.</p> <p>...but first, something important:</p> <p>ETHEREAL IS UNRELEASED, UNFINISHED, AND UNTESTED. DO NOT USE IT TO BUILD TOWERS YET.</p>"},{"location":"docs/tour-of-ethereal/#setup","title":"Setup","text":"<ol> <li> <p>Open a fresh baseplate in Roblox Studio.</p> </li> <li> <p>Check you have the Ethereal plugin installed. Click on the Plugins tab, and     check for the \"Launch Ethereal\" button:</p> <p></p> </li> <li> <p>Click \"Launch Ethereal\" to open the plugin widget. It's recommended to dock     it below your viewport:</p> <p></p> </li> </ol>"},{"location":"docs/tour-of-ethereal/#using-kits","title":"Using Kits","text":"<p>This section isn't technically implemented yet</p> <p>Ethereal comes with tower kits. For now, let's use the standard Eternal Towers of Hell version 5.5 kit.</p> <ol> <li> <p>Click on the \"Kits\" menu.</p> </li> <li> <p>Click on the Eternal Towers of Hell category and scroll down for version 5.5.</p> </li> <li> <p>Click on it to insert the kit.</p> </li> </ol> <p>The Eternal Towers of Hell kit should be inserted and ready to be used!</p> <p>Due to plugin API limitations, you will need to configure the game:</p> <ul> <li>Setting Lighting technology</li> <li>Setting character model from R15 to R6</li> <li>Setting Workspace.PhysicsSettingMethod to Fixed</li> </ul>"},{"location":"docs/tour-of-ethereal/#using-ethereal-tools","title":"Using Ethereal Tools","text":"<p>This section isn't feature implemented yet</p> <p>Ethereal offers a range of tools to enhance your workflow. Let's use the \"Color Gradient Frame\" tool to switch up the standard frame gradient.</p> <ol> <li> <p>In the Explorer widget, select the folder containing your EToH v5.5 kit.</p> </li> <li> <p>Navigate to the \"Tools\" menu within the Ethereal plugin.</p> </li> <li> <p>Find the \"Color Gradient Frame\" tool. This tool colors frames based on a     defined gradient. Use the search box if convenient.</p> </li> <li> <p>Click on the caret arrow to expand the tool.</p> </li> <li> <p>Click on the gradient next to \"Frame Gradient\". Adjust the gradient with the     new menu, and click OK once finished:</p> </li> <li> <p>Now that you've set the gradient, click the gold \"Color\" button:</p> </li> <li> <p>The frame should now be colored:</p> </li> </ol> <p>Tools are very handy and help eliminate tedious parts of your everyday tower building.</p> <p>Starring Tools</p> <p>If you'd like, click the Star next to \"Color Gradient Frame\" to pin it at the top for quick access.</p> <p>With that, you've created a new tower using all of the major Ethereal features!</p>"},{"location":"docs/why-ethereal/","title":"Why Ethereal?","text":"<p>This page is a work in progress.</p>"},{"location":"docs/why-ethereal/#because-etoh-deserves-better","title":"Because EToH deserves better","text":"<p>It's time to lay the foundation for the next decade of tower building.</p> <p>For builders: Ethereal consolidates essential tools and resources into a single, intuitive package, including scripts, plugin functionality, tower kits, images, sound effects, and ClientObjects. Other plugins can extend the Ethereal plugin with its own functionality.</p> <p>For developers: Ethereal exposes plugin APIs for extending the plugin with new tools, and game APIS, for hooking onto Ethereal while playtesting. Ethereal comes with great documentation that you're reading, type-safe APIs, and unparalleled DX.</p> <p>Down the line, Ethereal could:</p> <ul> <li>Sync custom <code>ClientObjectScripts</code> with Rojo</li> <li>Sync file system images/sound effects locally with Asphalt</li> </ul>"},{"location":"docs/why-ethereal/#because-tower-building-is-too-tedious","title":"Because tower building is too tedious","text":"<p>Building towers in Eternal Towers of Hell can be complex, often requiring multiple plugins and tools. Ethereal simplifies this process by consolidating functionality from various plugin into a single, streamlined widget:</p> <p>Instead of judging these plugins:</p> <ul> <li>JToH Kit Tools to bootstrap a tower</li> <li>JToH Part Counter to ensure your tower doesn't surpass the limits.</li> <li>Archimedes for creating curved geometry</li> <li>Gapfill from GeomTools for filling misaligned parts</li> <li>OozleDraw and AAZIER to create tightropes</li> <li>Welder to weld parts faster</li> <li>Quality-of-life plugins such as the Elttob Suite</li> </ul>"},{"location":"docs/api-reference/","title":"API Reference","text":"<ul> <li> <p>Ethereal for Plugins</p> <p>APIs for creating new tools and interacting with the Ethereal plugin.</p> </li> <li> <p>Ethereal for Games</p> <p>APIs for interacting with the Ethereal plugin in a running game.</p> </li> </ul>"},{"location":"docs/api-reference/#type-annotations","title":"Type Annotations","text":"<p>Each documented API member includes a type annotation:</p> <pre><code>export type TowerInstance = {\n    ClientSidedObjects: Instance,\n    Obby: TowerObbyInstance,\n    Frame: Instance,\n    SpawnLocation: BasePart,\n}\n</code></pre> <p>While these type annotations are designed to be Luau-like, they are ultimately psuedocode included as a developer aid. For fully accurate and syntactically valid type information, please refer to the source code directly.</p>"},{"location":"docs/api-reference/ethereal-for-games/","title":"Ethereal for Games","text":""},{"location":"docs/api-reference/ethereal-for-games/#ethereal-for-games","title":"Ethereal for Games","text":"<p>APIs for interacting with the Ethereal plugin in a running game.</p> <p>Summary:</p> <p>Packages:</p> <ul> <li>  pesde \u2014 <code>@znotfireman/ethereal_for_games</code></li> <li>  wally \u2014 <code>@znotfireman/ethereal-for-games</code></li> <li>n NPM \u2014 <code>@rbxts/ethereal-for-games</code></li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/","title":"Ethereal for Plugins","text":""},{"location":"docs/api-reference/ethereal-for-plugins/#ethereal-for-plugins","title":"Ethereal for Plugins","text":"<p>APIs for creating new tools and interacting with the Ethereal plugin.</p> <p>Summary:</p> <ul> <li>Ethereal: Entry point to the Ethereal for Plugins package.</li> <li>Lib: Tool library. Every Tool <code>init</code> function receives the <code>Lib</code>, which enables interacting with the current selected tower and the Ethereal plugin. Certain APIs require permissions requested from <code>Ethereal.permission</code> or <code>Ethereal.tryPermission</code>.</li> </ul> <p>Packages:</p> <ul> <li>  pesde \u2014 <code>@znotfireman/ethereal_for_plugins</code></li> <li>  wally \u2014 <code>@znotfireman/ethereal-for-plugins</code></li> <li>n NPM \u2014 <code>@rbxts/ethereal-for-plugins</code></li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#ethereal","title":"Ethereal","text":"<p><pre><code>type Ethereal = {\n    permission: (plugin: Plugin, props: PermissionProps) -&gt; PermissionedApi,\n    tryPermission: (plugin: Plugin, props: PermissionProps) -&gt; TryPermissionResult,\n}\n</code></pre> Entry point to the Ethereal for Plugins package.</p>"},{"location":"docs/api-reference/ethereal-for-plugins/#function-permission","title":"function permission","text":"<p><pre><code>function Ethereal.permission(\n    plugin: Plugin,\n    props: PermissionProps\n): PermissionedApi\n</code></pre> In order to use any of the Ethereal for Plugins APIs, you must first explicitly request. Users will be prompted to allow/deny the plugin for access. This function will yield until the user responds and will throw if access is denied. See: <code>Ethereal.tryPermission</code></p> <p>Parameters:</p> <ul> <li> <p>plugin \u2014 The plugin that is requesting Ethereal's APIs.</p> </li> <li> <p>props \u2014 Plugin info and the permissions to request.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>PermissionedApi</code> \u2014 The permissioned Ethereal for Plugins API.</li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#function-trypermission","title":"function tryPermission","text":"<p><pre><code>function Ethereal.tryPermission(\n    plugin: Plugin,\n    props: PermissionProps\n): TryPermissionResult\n</code></pre> In order to use any of the Ethereal for Plugins APIs, you must first explicitly request. Users will be prompted to allow/deny the plugin for access. This function will yield until the user responds and returns a result object. See: <code>Ethereal.permission</code></p> <p>Parameters:</p> <ul> <li> <p>plugin \u2014 The plugin that is requesting Ethereal's APIs.</p> </li> <li> <p>props \u2014 Plugin info and the permissions to request.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>TryPermissionResult</code> \u2014 The result of requesting the plugin.</li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#lib","title":"Lib","text":"<p><pre><code>type Lib = {\n    tower: (self: Lib) -&gt; Tower?,\n    action: (self: Lib, props: ActionProps) -&gt; Action,\n}\n</code></pre> Tool library. Every Tool <code>init</code> function receives the <code>Lib</code>, which enables interacting with the current selected tower and the Ethereal plugin. Certain APIs require permissions requested from <code>Ethereal.permission</code> or <code>Ethereal.tryPermission</code>.</p>"},{"location":"docs/api-reference/ethereal-for-plugins/#function-tower","title":"function tower","text":"<p><pre><code>function Lib.tower(\n    self: Lib\n): Tower?\n</code></pre> Returns the selected tower if any.</p> <p>Returns:</p> <ul> <li><code>Tower?</code> \u2014 The selected Tower object.</li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#function-action","title":"function action","text":"<p><pre><code>function Lib.action(\n    self: Lib,\n    props: ActionProps\n): Action\n</code></pre> Creates a new action. Actions are functions activated as buttons in the tool listings.</p> <p>Parameters:</p> <ul> <li>props \u2014 Construction properties.</li> </ul> <p>Returns:</p> <ul> <li><code>Action</code> \u2014 </li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#type-actionprops","title":"type ActionProps","text":"<p><pre><code>export type ActionProps = {\n    label: string,\n}\n</code></pre> Properties for creating actions.</p> <ul> <li>label \u2014 The label used for the action button.</li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#type-towerobbyinstance","title":"type TowerObbyInstance","text":"<p><pre><code>export type TowerObbyInstance = {\n    WinPad: BasePart,\n}\n</code></pre> The Obby folder in an Eternal Towers of Hell tower.</p> <ul> <li>WinPad \u2014 When touched finishes a player's run of the tower.</li> </ul>"},{"location":"docs/api-reference/ethereal-for-plugins/#type-towerinstance","title":"type TowerInstance","text":"<p><pre><code>export type TowerInstance = {\n    ClientSidedObjects: Instance,\n    Obby: TowerObbyInstance,\n    Frame: Instance,\n    SpawnLocation: BasePart,\n}\n</code></pre> An Eternal Towers of Hell tower instance.</p> <ul> <li>ClientSidedObjects \u2014 Contains every ClientObject used in the tower.</li> <li>Obby \u2014 Contains the purism and the tower's winpad</li> <li>Frame \u2014 The frame of the tower.</li> <li>SpawnLocation \u2014 Where the player will spawn.</li> </ul>"},{"location":"docs/ethereal-for-games/","title":"Ethereal for Games","text":"<p>This page is a work in progress.</p>"},{"location":"docs/ethereal-for-plugins/","title":"Ethereal for Plugins","text":"<p>This page is a work in progress.</p> <p>The Ethereal for Plugins package enables extending Ethereal with your own tools.</p>"},{"location":"docs/ethereal-for-plugins/#plugin-setup","title":"Plugin Setup","text":"<p>Ensure you have the Ethereal for Plugins package.</p> <p>Create a new module, perhaps named <code>ethereal</code>, and import the Ethereal for Plugins package:</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal Ethereal = require(plugin.packages.ethereal)\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#permissions","title":"Permissions","text":"<p>In order to use any of the Ethereal for Plugins APIs, you must first explicitly request them using <code>Ethereal.permission</code>.</p> <p>Users will be prompted to allow/deny the plugin for access. This function will yield until the user responds and will throw if access is denied.</p> <pre><code>local et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n</code></pre> <p>Alternatively, <code>Ethereal.tryPermission</code> returns a result object which can be handled:</p> <pre><code>local etResult = Ethereal.tryPermission(plugin, {\n    -- ...\n})\n\nif not etResult.ok then\n    return error(`Failed to get Ethereal for Plugins: {etResult.reason} (id: {etResult.id})`)\nend\n\nlocal et = etResult.api\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#keys","title":"Keys","text":"<p>The API includes a key that uniquely identifies you as an authenticated plugin. You can store this key as a plugin setting to request permission without prompting the user for subsequent sessions:</p> <pre><code>local key = plugin:GetSetting(\"etherealPermissionKey\")\n\nlocal et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n    key = key,\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n\nif not key then\n    plugin:SetSetting(\"etherealPermissionKey\", et.key)\nend\n</code></pre>"},{"location":"docs/ethereal-for-plugins/#organization","title":"Organization","text":"<p>Ethereal for Plugins can now be used, but it's strongly recommended to create a dedicated module for the permissioned API:</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal Ethereal = require(plugin.packages.ethereal)\n\nlocal key = plugin:GetSetting(\"etherealPermissionKey\")\n\nlocal et = Ethereal.permission(plugin, {\n    name = \"My Plugin\",\n    icon = \"rbxassetid://0987654321\",\n\n    permissions = {\n        Ethereal.Permissions.Tools\n    }\n})\n\nif not key then\n    plugin:SetSetting(\"etherealPermissionKey\", et.key)\nend\n\nreturn et\n</code></pre> <p>You can then require this module and use the returned APIs.</p> <pre><code>local plugin = assert(script:FindFirstAncestorWhichIsA(\"Plugin\"))\nlocal et = require(plugin.ethereal)\n\nprint(et.version) --&gt; \"0.1.0\"\n</code></pre>"},{"location":"docs/ethereal-for-plugins/your-first-tool/","title":"Your First Tool","text":"<p>This page is a work in progress.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}