diff --git a/node_modules/@rbxts/fusion/.bun-tag-1a9215bb8cf8e86 b/.bun-tag-1a9215bb8cf8e86
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@rbxts/fusion/.bun-tag-675d3b36ebb31563 b/.bun-tag-675d3b36ebb31563
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@rbxts/fusion/out/TS/fragment.luau b/out/TS/fragment.luau
new file mode 100644
index 0000000000000000000000000000000000000000..056707ecf6e302bcbd6f0d881e5c5604c3e38041
--- /dev/null
+++ b/out/TS/fragment.luau
@@ -0,0 +1,10 @@
+--!strict
+--!nolint LocalUnused
+--!nolint LocalShadow
+local task = nil -- Disable usage of Roblox's task scheduler
+
+local function Fragment(props: { children: any })
+	return props.children
+end
+
+return Fragment
diff --git a/out/index.d.ts b/out/index.d.ts
index acdd349294e702e4e48c3994b6baabd7163ba017..8c143d831eb47d786de7860fdde087d6d235b98a 100644
--- a/out/index.d.ts
+++ b/out/index.d.ts
@@ -28,6 +28,10 @@ declare namespace Fusion {
 	export type Value<T, S = T> = Types.Value<T, S>;
 	export type Version = Types.Version;
 
+	export type Error = Types.Error
+	export type ExternalDebugger = Types.ExternalDebugger;
+    export type ExternalProvider = Types.ExternalProvider;
+
 	/* General */
 	export const version: Version;
 	export const Contextual: Types.ContextualConstructor;
@@ -69,4 +73,25 @@ declare namespace Fusion {
 
 	// JSX!
 	// export const jsx: typeof newJsx;
+    export const Fragment: <T>(props: T) => Child;
+
+	export const External: {
+        safetyTimerMultiplier: number;
+        setExternalProvider:(newProvider: ExternalProvider | undefined) => ExternalProvider | undefined;
+        isTimeCritical:() => boolean;
+        doTaskImmediate:(resume: () => void) => void;
+        doTaskDeferred:(resume: () => void) => void;
+        logError:(messageID: string, errObj: Error | undefined, ...args: defined[]) => never;
+        logErrorNonFatal:(messageID: string, errObj: Error | undefined, ...args: defined[]) => void;
+        logWarn:(messageID: string, ...args: defined[]) => void;
+        bindToUpdateStep:(callback: (now: number) => void) => () => void;
+        performUpdateStep:(now: number) => void;
+        lastUpdateStep: () => number;
+    }
+
+	export const ExternalDebug: {
+    	setDebugger: (newProvider: ExternalDebugger | undefined) => ExternalDebugger | undefined;
+        trackScope: (scope: Scope<unknown>) => void;
+        untrackScope: (scope: Scope<unknown>) => void;
+	}
 }
diff --git a/out/init.luau b/out/init.luau
index 15ad49692be14fd9d99539dcb2cfc03b46c63983..e6fe1c163091ffdb7c9a3970ba8f36d9eb99914f 100644
--- a/out/init.luau
+++ b/out/init.luau
@@ -38,9 +38,9 @@ do
 	External.setExternalProvider(RobloxExternal)
 end
 
-local Fusion: Fusion = table.freeze {
+local Fusion: Fusion = table.freeze({
 	-- General
-	version = {major = 0, minor = 3, isRelease = true},
+	version = { major = 0, minor = 3, isRelease = true },
 	Contextual = require(script.Utility.Contextual),
 	Safe = require(script.Utility.Safe),
 
@@ -50,7 +50,7 @@ local Fusion: Fusion = table.freeze {
 	doCleanup = require(script.Memory.doCleanup),
 	innerScope = require(script.Memory.innerScope),
 	scoped = require(script.Memory.scoped),
-	
+
 	-- Graph
 	Observer = require(script.Graph.Observer),
 
@@ -80,6 +80,12 @@ local Fusion: Fusion = table.freeze {
 
 	-- JSX!
 	jsx = require(script.TS.jsx) :: Types.NewJSXConstructor,
-}
+	Fragment = function(props)
+		return props.children
+	end,
+
+	External = External,
+	ExternalDebug = require(script.ExternalDebug),
+})
 
 return Fusion
